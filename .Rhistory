revealjs::revealjs_presentation
paste0(readLines("filters.lua"), sep = "\n")
library(rmarkdown)
library(lifegamer)
`%>%` <- magrittr::`%>%`
lifegame(frog)
animate(lifegame(frog), 2)
animate(lifegame(frog), 3)
animate(lifegame(frog, 2))
install.packages('ragg')
install.packages('rmarkdown')
install.packages("rmarkdown")
f <- function(n) {
if (n < 0) return(1)
f(n - 1) * n
}
f(10)
f <- function(n) {
if (n < 0) return(1)
f(n - 1) * n
}
f(10)
f <- function(n) {
if (n <= 0) return(1)
f(n - 1) * n
}
f(10)
f <- function(n) {
if (n <= 0) return(1)
f(n - 1) * n
}
f(10)
f <- function(n) {
result <- 1
lapply(seq(n), function(i) {
result <<- i * result
})
result
}
f(10)
factorial_s3 <- function(n) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n) {
factorial_s3(structure(
n * n - 1, class = n - 1
))
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n) {
factorial_s3(structure(
n * n - 1, class = as.character(n - 1)
))
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n) {
n = as.integer(n)
factorial_s3(structure(
n * n - 1, class = as.character(n - 1)
))
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n) {
res <- structure(n * n - 1, class = n - 1)
print(class(res))
factorial_s3(res)
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n, ...) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n, ...) {
new_n <- structure(n - 1, class = as.character(n - 1))
factorial(n - 1) * n
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n, ...) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n, ...) {
new_n <- n - 1
class(new_n) <- as.character(new_n)
factorial_s3(new_n) * n
}
factorial_s3.0 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n, ...) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n, ...) {
new_n <- n - 1
class(new_n) <- as.character(new_n)
factorial_s3(new_n) * n
}
factorial_s3.1 <- function(n) n
factorial_s3(10)
factorial_s3 <- function(n, ...) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n, ...) {
new_n <- n - 1
class(new_n) <- as.character(new_n)
factorial_s3(new_n) * n
}
factorial_s3.1 <- function(n) unclass(n)
factorial_s3(10)
factorial_s3 <- function(n, ...) {
UseMethod("factorial_s3")
}
factorial_s3.default <- function(n, ...) {
new_n <- n - 1
class(new_n) <- as.character(new_n)
factorial_s3(new_n) * n
}
factorial_s3.1 <- function(n) c(n)
factorial_s3(10)[[1]]
factorial_s3 <-
function(n, ...) UseMethod("factorial_s3")
factorial_s3.default <- function(n, ...) {
n * factorial_s3(structure(
n - 1L, class = as.character(n - 1L)))
}
factorial_s3.0 <- function(n) 1L
factorial_s3(10L)
gamma(3)
gamma(3 + 1L)
factorial
tidy
fortify::tidy
broom::tidy(lm(mpg ~ ., data = mtcars))
broom::tidy(lm(mpg ~ ., data = mtcars)) %>% class
dplyr:::mutate.data.frame
dplyr:::select.data.frame
dplyr:::select.tbl_df
dplyr:::select.tibble
dplyr:::mutate_.data.frame
dplyr:::mutate_.tbl_df
library(rmarkdown)
library(lifegamer)
`%>%` <- magrittr::`%>%`
bench_mark <- bench::mark(
factorial_for(10L),
factorial_lapply(10L),
factorial_recall(10L),
factorial_s3(10L)
)
library(rmarkdown)
library(lifegamer)
`%>%` <- magrittr::`%>%`
library(knitr)
opts_chunk$set(
collapse = TRUE, comment = "#>",
fig.process = knitr::plot_crop
)
knitr::knit_print(animate(lifegame(frog, 2)))
factorial_for <- function(n) {
result <- 1L
for (i in seq(n)) {
result <- i * result
}
result
}
factorial_for(10L)
factorial_lapply <- function(n) {
result <- 1L
lapply(seq(n), function(i) {
result <<- i * result
})
result
}
factorial_lapply(10L)
factorial_recall <- function(n) {
if (n <= 0L) return(1L)
Recall(n - 1L) * n
}
factorial_recall(10L)
factorial_s3 <-
function(n, ...) UseMethod("factorial_s3")
factorial_s3.default <- function(n, ...) {
n * factorial_s3(structure(
n - 1L, class = as.character(n - 1L)))[[1L]]
}
factorial_s3.0 <- function(n) 1L
factorial_s3(10L)
bench_mark <- bench::mark(
factorial_for(10L),
factorial_lapply(10L),
factorial_recall(10L),
factorial_s3(10L)
)
ggplot2::autoplot(bench_mark)
unlink('index_cache', recursive = TRUE)
knitr::fig_path('bench)
knitr::fig_path('bench')
